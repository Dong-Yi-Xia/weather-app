{"version":3,"sources":["App.js","components/date.js","index.js"],"names":["api","process","App","useState","query","setQuery","weather","setWeather","success","position","a","lat","coords","latitude","lon","longitude","fetch","response","json","data","error","console","log","useEffect","navigator","geolocation","getCurrentPosition","search","evt","key","className","main","temp","weatherType","type","placeholder","onChange","e","target","value","onKeyPress","name","sys","country","Date","toLocaleDateString","undefined","weekday","year","month","day","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAKMA,EACCC,mCADDD,EAEE,2CAyFOE,MAtFf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAMTC,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACNC,EAAMF,EAASG,OAAOC,SACtBC,EAAML,EAASG,OAAOG,UAFhB,SAGSC,MAAM,GAAD,OAAIhB,EAAJ,wBAA4Bc,EAA5B,gBAAuCH,EAAvC,iCAAmEX,IAHjF,cAGRiB,EAHQ,gBAIKA,EAASC,OAJd,OAIRC,EAJQ,OAKZd,EAAS,IACTE,EAAWY,GANC,4CAAH,sDASPC,EAAQ,WACVC,QAAQC,IAAI,oDAGdC,qBAAU,WACRC,UAAUC,YAAYC,mBAAmBlB,EAASY,KACjD,IAGH,IAAMO,EAAM,uCAAG,WAAOC,GAAP,iBAAAlB,EAAA,yDACE,UAAZkB,EAAIC,KAA6B,KAAVzB,EADb,gBAEXoB,UAAUC,YAAYC,mBAAmBlB,EAASY,GAFvC,0BAIO,UAAZQ,EAAIC,IAJC,iCAKYb,MAAM,GAAD,OAAIhB,EAAJ,qBAAyBI,EAAzB,iCAAuDJ,IALxE,cAKLiB,EALK,iBAMQA,EAASC,OANjB,QAMLC,EANK,OAOTd,EAAS,IACTE,EAAWY,GACXE,QAAQC,IAAIH,GATH,4CAAH,sDA8BZ,OACE,qBAAKW,UAlBa,WAClB,GAAGxB,EAAQyB,KAAK,CACd,IAAIC,EAAO1B,EAAQyB,KAAKC,KACxB,QAAO,GACL,KAAMA,GAAQ,GACZ,MAAO,WACT,KAAMA,EAAO,IAAMA,EAAO,GACxB,MAAO,WACT,KAAMA,GAAQ,GACZ,MAAO,UACT,QACE,MAAO,OAGb,MAAO,MAISC,GAAhB,SACI,iCACI,qBAAKH,UAAU,aAAf,SACI,uBACEI,KAAK,OACLJ,UAAU,aACVK,YAAY,2CACZC,SAAU,SAAAC,GAAC,OAAIhC,EAASgC,EAAEC,OAAOC,QACjCA,MAAOnC,EACPoC,WAAYb,MAGO,oBAAhBrB,EAAQyB,KAChB,gCACG,sBAAKD,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BxB,EAAQmC,KAAnC,KAA2CnC,EAAQoC,IAAIC,QAAvD,OACA,qBAAKb,UAAU,OAAf,UClER,IAAIc,MAEHC,wBAAmBC,EADZ,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,iBDoE5D,sBAAKpB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,cAAwBqB,KAAKC,MAAM9C,EAAQyB,KAAKC,MAAhD,YACA,sBAAKF,UAAU,UAAf,cAA2BxB,EAAQA,QAAQ,GAAGyB,KAA9C,aAGL,qBAAKD,UAAU,YAAf,oCEpFbuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1db47432.chunk.js","sourcesContent":["// require('dotenv').config()\nimport './App.css';\nimport React, { useEffect, useState } from 'react'\nimport {dateBuilder2} from './components/date'\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER,\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n\n  let success = async (position) => {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    let response = await fetch(`${api.base}weather?&lon=${lon}&lat=${lat}&units=imperial&appid=${api.key}`)\n    let data = await response.json()\n    setQuery('')\n    setWeather(data)\n  }\n\n  let error = () => {\n    console.log('Unable to get location, please turn on location')\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error)\n  }, [])\n  \n\n  const search = async (evt) => {\n    if(evt.key === 'Enter' && query === ''){\n      navigator.geolocation.getCurrentPosition(success, error)\n    }\n    else if(evt.key === 'Enter'){\n        let response = await fetch(`${api.base}weather?q=${query}&units=imperial&appid=${api.key}`)\n        let data = await response.json()\n        setQuery('')\n        setWeather(data)\n        console.log(data)\n    }\n  }\n\n  const weatherType = () => {\n    if(weather.main){\n      let temp = weather.main.temp\n      switch(true){\n        case (temp <= 45):\n          return 'app cold'\n        case (temp > 45 && temp < 80):\n          return 'app warm'\n        case (temp >= 80):\n          return 'app hot'  \n        default:  \n          return 'app'\n      }\n    }\n    return 'app'\n  }\n\n  return (\n    <div className={weatherType()}>\n        <main>\n            <div className='search-box'>\n                <input \n                  type='text'\n                  className='search-bar'\n                  placeholder='Search a city name, state, country......'\n                  onChange={e => setQuery(e.target.value)}\n                  value={query}\n                  onKeyPress={search}\n                />\n            </div>\n            {(typeof weather.main != 'undefined') ? \n            (<div>     \n                <div className='location-box'>\n                    <div className='location'>{weather.name}, {weather.sys.country} </div>\n                    <div className='date'>{dateBuilder2()}</div>\n                </div>\n    \n                <div className='weather-box'>\n                  <div className='temp'> {Math.round(weather.main.temp)}Â°F </div>\n                  <div className='weather'> {weather.weather[0].main} </div>\n                </div>\n            </div>) : \n            (<div className='not-found'> CITY NOT FOUND </div>)}\n\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","export const dateBuilder = () => {\n    let d = new Date()\n\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n\n    return `${day} ${date} ${month} ${year}`\n}\n\nexport const dateBuilder2 = () => {\n    let d = new Date()\n    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    return d.toLocaleDateString(undefined, options)\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}